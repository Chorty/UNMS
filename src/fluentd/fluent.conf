<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<system>
  file_permission 0600
</system>

# Remove some fields added by docker to reduce noise
# - container_id -> we do not have multiple instances of one container
# - container_name -> same as tag
# - source -> almost always 'stdout'
<filter *>
  @type record_transformer
  remove_keys container_id,container_name,source
</filter>

# UNMS container can output plaintext messages and json messages (from bunyan logger).
# This filter parses json messages and keeps the non-json messages unchanged.
<filter {unms,netflow}>
  @type parser
  key_name log
  <parse>
    @type multi_format
    <pattern>
      format json
      time_key time
      time_format %Y-%m-%dT%H:%M:%S.%L%z
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

<filter {ucrm}>
  @type parser
  key_name log
  <parse>
    @type multi_format
    <pattern>
      format json
      time_key datetime
      time_format %Y-%m-%dT%H:%M:%S%:z
    </pattern>
    <pattern>
      format none
    </pattern>
  </parse>
</filter>

# Transform Stackdriver log levels to bunyan log levels and remove extra fields.
<filter {ucrm}>
  @type record_transformer
  enable_ruby
  <record>
    level "${
      if !record[\"level\"] then 30
      elsif record[\"level\"] <= 100 then 20
      elsif record[\"level\"] <= 200 then 30
      elsif record[\"level\"] <= 400 then 40
      elsif record[\"level\"] <= 500 then 50
      else 60
      end
    }"
  </record>
  remove_keys level_name,severity
</filter>

# Rename log to msg and fill other parameters to make the log conform to bunyan format.
<filter *>
  @type record_transformer
  enable_ruby
  <record>
    msg ${record["log"] ? record["log"] : record["msg"] ? record["msg"] : record["message"]}
    name ${record["name"] ? record["name"] : record["tag"] ? record["tag"] : "unknown" }
    hostname ${record["hostname"] ? record["hostname"] : "unknown"}
    pid ${record["pid"] ? record["pid"] : 0}
    v ${record["v"] ? record["v"] : 0}
    level ${record["level"] ? record["level"] : 30}
  </record>
  remove_keys log,message
</filter>

<match unms>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/unms
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/unms.*.log
  append true
  compress gzip
</match>

<match ucrm>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/ucrm
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/ucrm.*.log
  append true
  compress gzip
</match>

<match postgres>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/postgres
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/postgres.*.log
  append true
  compress gzip
</match>

<match redis>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/redis
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/redis.*.log
  append true
  compress gzip
</match>

<match rabbitmq>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/rabbitmq
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/rabbitmq.*.log
  append true
  compress gzip
</match>

<match nginx>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/nginx
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/nginx.*.log
  append true
  compress gzip
</match>

<match netflow>
  @type file
  format json
  include_tag_key true
  include_time_key true
  path /fluentd/log/netflow
  time_slice_format %Y%m%d
  buffer_path /fluentd/log/netflow.*.log
  append true
  compress gzip
</match>

